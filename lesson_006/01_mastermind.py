# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#


# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import make_a_number, guess_a_number, MAX_SYMBOLS
import mastermind_engine as me


def validate():
    global user_input
    user_input = input("Угадай число:")

    if len(user_input) != MAX_SYMBOLS:
        print('Ошибка! Неверное количество символов')
        validate()
    elif sorted(user_input) != sorted(set(user_input)):
        print('Ошибка! Есть одинаковые цифры')
        validate()
    elif user_input.isdigit() is False:
        print('Ошибка! Введены не цифровые данные')
        validate()
    elif user_input[0] == '0':
        print('Ошибка! Первый символ равен 0')
        validate()
    else:
        user_input = [int(i) for i in str(user_input)]
    return user_input


def game():
    me.bull = 0
    make_a_number()

    while me.bull < 4:
        validate()
        guess_a_number(user_input)
        if me.bull == 4:
            print("Поздравляю с победой!")
            if str(input('Введи цифру 1, если хочешь попробовать еще раз:')) == '1':
                game()
            else:
                break
        else:
            print("Коровы: " + str(me.cow) + " Быки: " + str(me.bull))


game()
